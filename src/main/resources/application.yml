spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull
      username: root
      password: root
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 1
      minIdle: 3
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      validationQuery: select 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
  mvc:
    throw-exception-if-no-handler-found: true #
  resources:
    add-mappings: false # don't build reflection for resources
# ---quartz----
  quartz:
    #相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            instanceName: clusteredScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
          datasource:
            quartzDataSource:
              driver: ${spring.datasource.druid.driver-class-name}
              url: ${spring.datasource.druid.url}
              user: ${spring.datasource.druid.username}
              password: ${spring.datasource.druid.password}
              maxConnections: 5
              validationQuery: select 0
              connection-provider:
                class: com.mycloud.service.task.config.quartz.DruidConnectionProvider
    #数据库方式
    job-store-type: jdbc
    #初始化表结构
    jdbc:
      initialize-schema: never
# ---quartz----

#--- mybatis configurations ---#
mybatis:
  typeAliasesPackage: com.mycloud.service.task.models.domain.vo
  mapperLocations: classpath:/mapper/**/*Dao.xml
  #type-aliases-super-type: com.mycloud.service.user.entity
#mybatis:
#  mapper-locations: classpath:mapper/**/*.xml
#  type-aliases-package: com.developlee.quartz.models.domain.vo
#--- mybatis configurations ---#
#--- custom configurations ---#
#app:
#  quartz:
#    scheduler:
#      instance-name: welendScheduler
#      instance-id: AUTO   # 使用集群：AUTO 不使用集群：NON_CLUSTERED
##      skip-update-check: true
##      job-factory:
##        class: org.quartz.simpl.SimpleJobFactory
#    jobstore:
#      class: org.quartz.impl.jdbcjobstore.JobStoreTX
#      driver-delegate-class: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#      datasource: quartzDataSource
#      table-prefix: QRTZ_
#      is-clustered: true
#    thread-pool:
#      class: org.quartz.simpl.SimpleThreadPool
#      thread-count: 5
#    datasource:
#      quartzDataSource:
#        driver: ${spring.datasource.druid.driver-class-name}
#        url: ${spring.datasource.druid.url}
#        user: ${spring.datasource.druid.username}
#        password: ${spring.datasource.druid.password}
#        maxConnections: 5
#        validationQuery: select 0
#        connection-provider:
#          class: com.mycloud.service.task.config.quartz.DruidConnectionProvider
#--- custom configurations ---#

logging:
  file: quartz-service.log
  level:
    com.quartz: debug